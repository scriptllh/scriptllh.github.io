<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on scriptllh blog</title>
    <link>/post/</link>
    <description>Recent content in Posts on scriptllh blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 06 Mar 2019 16:01:23 +0800</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MQTT(消息队列遥测传输协议)</title>
      <link>/post/mqtt%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E9%81%A5%E6%B5%8B%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Wed, 06 Mar 2019 16:01:23 +0800</pubDate>
      
      <guid>/post/mqtt%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E9%81%A5%E6%B5%8B%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/</guid>
      <description>优点 可以以极少的代码和有限的带宽，为连接远程设备提供实时可靠的消息服务。作为一种低开销、低带宽占用的即时通讯协议，使其在物联网、小型设备、移</description>
    </item>
    
    <item>
      <title>golang性能调优实践</title>
      <link>/post/golang%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Wed, 06 Mar 2019 16:01:23 +0800</pubDate>
      
      <guid>/post/golang%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E5%AE%9E%E8%B7%B5/</guid>
      <description>数据分析 top数据分析 总采样数27 flat=&amp;gt;在27次中25次该函数都出现了 flat%=&amp;gt; 25&amp;frasl;27 = 92.59% Sum% =&amp;gt; 92.59% + 3.7% = 96.3% Cum =&amp;gt; 在27次中有25次都出现了run</description>
    </item>
    
    <item>
      <title>golang性能调优实践---</title>
      <link>/post/lsm/</link>
      <pubDate>Wed, 06 Mar 2019 16:01:23 +0800</pubDate>
      
      <guid>/post/lsm/</guid>
      <description>数据分析 top数据分析 总采样数27 flat=&amp;gt;在27次中25次该函数都出现了 flat%=&amp;gt; 25&amp;frasl;27 = 92.59% Sum% =&amp;gt; 92.59% + 3.7% = 96.3% Cum =&amp;gt; 在27次中有25次都出现了run</description>
    </item>
    
    <item>
      <title>GO TCP 连接</title>
      <link>/post/go-tcp-%E8%BF%9E%E6%8E%A5/</link>
      <pubDate>Tue, 05 Mar 2019 16:01:23 +0800</pubDate>
      
      <guid>/post/go-tcp-%E8%BF%9E%E6%8E%A5/</guid>
      <description>epoll 减少资源占用 操作系统会为每一个连接分配一定的内存空间（主要是内部网络数据结构sk_buff的大小、连接的读写缓存，sof），不同的编程语言</description>
    </item>
    
    <item>
      <title>go 性能分析</title>
      <link>/post/go-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</link>
      <pubDate>Tue, 05 Mar 2019 16:01:23 +0800</pubDate>
      
      <guid>/post/go-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</guid>
      <description>go 性能分析（实时性的） https://github.com/hyper0x/go_command_tutorial/blob/master/0.12.md runtime/pprof 手动更灵活 语言层面集成了profile采样工具 cpu概要文件 默认以100Hz的频率对cpu的使用情况进行取样 实际上</description>
    </item>
    
    <item>
      <title>https</title>
      <link>/post/https/</link>
      <pubDate>Sun, 05 Aug 2018 15:01:23 +0800</pubDate>
      
      <guid>/post/https/</guid>
      <description>对称加密 非对称加密 TLS通讯过程 客户端发送请求hello,服务端返回公钥给浏览器，服务端将椭圆曲线的参数发给浏览器，浏览器通过非对称算法（r</description>
    </item>
    
    <item>
      <title>安装openresty</title>
      <link>/post/%E5%AE%89%E8%A3%85openresty/</link>
      <pubDate>Fri, 03 Aug 2018 16:01:23 +0800</pubDate>
      
      <guid>/post/%E5%AE%89%E8%A3%85openresty/</guid>
      <description>下载 解压 tar -zxvf openresty-1.13.6.2.tar.gz 目录结构 * bundle: nginx 源代、nginx的第三方模块、lua模块con 编译 1 ./configure 安装 make install</description>
    </item>
    
    <item>
      <title>redis事务</title>
      <link>/post/redis%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Tue, 05 Jun 2018 16:01:23 +0800</pubDate>
      
      <guid>/post/redis%E4%BA%8B%E5%8A%A1/</guid>
      <description>事务 redis 的命令是一组命令的集合 redis 保证了一个事务中的所有命令要么执行，要么不执行，如果发送Exec命令前客户端断线了，则redis会清空事务队列</description>
    </item>
    
    <item>
      <title>Makefile编写</title>
      <link>/post/makefile%E7%BC%96%E5%86%99/</link>
      <pubDate>Sun, 03 Jun 2018 16:01:23 +0800</pubDate>
      
      <guid>/post/makefile%E7%BC%96%E5%86%99/</guid>
      <description>背景 以前学的一些东西需要记录下 Makefile 编写 以自己实际项目来阐述每个的用法 目录结构 代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31</description>
    </item>
    
    <item>
      <title>nginx 事件驱动</title>
      <link>/post/nginx-%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/</link>
      <pubDate>Sun, 03 Jun 2018 16:01:23 +0800</pubDate>
      
      <guid>/post/nginx-%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/</guid>
      <description>nginx时间循环 epoll 请求切换 阻塞调用 非阻塞调用 !模块分类</description>
    </item>
    
    <item>
      <title>网络</title>
      <link>/post/%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Sun, 03 Jun 2018 16:01:23 +0800</pubDate>
      
      <guid>/post/%E7%BD%91%E7%BB%9C/</guid>
      <description>网络传输 TCP流与报文 TCP协议与非阻塞接口</description>
    </item>
    
    <item>
      <title>nginx安装</title>
      <link>/post/nginx%E5%AE%89%E8%A3%85/</link>
      <pubDate>Sun, 06 May 2018 16:01:23 +0800</pubDate>
      
      <guid>/post/nginx%E5%AE%89%E8%A3%85/</guid>
      <description>重载 nginx -s reload 热部署 拷贝新的二进制文件到指定目录 kill -USR2 pid(旧master进程号) 新老进程同时存在，会平滑的过渡到新的进程中去 kill -WINCH pid (优雅的关闭</description>
    </item>
    
    <item>
      <title>cassandra分布式搭建</title>
      <link>/post/cassandra%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Thu, 03 May 2018 16:01:23 +0800</pubDate>
      
      <guid>/post/cassandra%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA/</guid>
      <description>安装Java 下载jdk-8u171-linux-x64.tar 解压 配置环境变量 vi /etc/profile vi .bashrc 在文件末尾加入如下代码（根据自己路径做一定的更改） 1 2</description>
    </item>
    
    <item>
      <title>nginx架构基础</title>
      <link>/post/nginx%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Wed, 07 Mar 2018 16:01:23 +0800</pubDate>
      
      <guid>/post/nginx%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80/</guid>
      <description>nginx 请求处理流程 nginx进程结构 nginx 进程管理：信号 reload流程 热升级流程 work进程优雅的关闭</description>
    </item>
    
    <item>
      <title>记mac 迁移操作</title>
      <link>/post/%E8%AE%B0mac-%E8%BF%81%E7%A7%BB%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Fri, 02 Mar 2018 16:01:23 +0800</pubDate>
      
      <guid>/post/%E8%AE%B0mac-%E8%BF%81%E7%A7%BB%E6%93%8D%E4%BD%9C/</guid>
      <description>记mac 迁移操作 time machine 失败 开机按 command + R 进入 来到OS X 实用工具，选择“从 Time Machine 备份进行恢复”，点击“继续” 成功检测到Time Machine备份后，</description>
    </item>
    
    <item>
      <title>lua-openresty (2)</title>
      <link>/post/lua-openresty-2/</link>
      <pubDate>Sat, 03 Feb 2018 15:01:23 +0800</pubDate>
      
      <guid>/post/lua-openresty-2/</guid>
      <description>函数 函数定义 1 2 3 function function_name (arc) -- arc 表示参数列表，函数的参数列表可以为空 -- body end 1 2 3 local function function_name (arc) -- body end 由于全局变量一般会污染全局名字空间，同时也有性能损</description>
    </item>
    
    <item>
      <title>lua-openresty (1)</title>
      <link>/post/lua-openresty-1/</link>
      <pubDate>Fri, 02 Feb 2018 16:01:23 +0800</pubDate>
      
      <guid>/post/lua-openresty-1/</guid>
      <description>介绍 Lua 是一个小巧的脚本语言。openresty采用的是LuaJIT 2 ，而不是标准的lua。 解释下什么是jit LuaJIT 的运行时环境包括一个用手写汇编</description>
    </item>
    
  </channel>
</rss>